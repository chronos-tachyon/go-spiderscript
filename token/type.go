package token

import (
	"fmt"
)

type Type uint16

const (
	Invalid Type = iota
	Partial
	EOF
	HWS
	VWS
	Bang
	BangEqual
	Hash
	Percent
	PercentEqual
	Ampersand
	AmpersandAmpersand
	AmpersandAmpersandEqual
	AmpersandEqual
	LParen
	RParen
	Star
	StarStar
	StarStarEqual
	StarEqual
	Plus
	PlusPlus
	PlusEqual
	Comma
	Minus
	MinusMinus
	MinusEqual
	Dot
	DotDot
	DotDotDot
	Slash
	SlashPercent
	SlashEqual
	Colon
	ColonColon
	ColonEqual
	Semicolon
	Less
	LessLess
	LessLessEqual
	LessLessBar
	LessLessBarEqual
	LessEqual
	LessEqualGreater
	Equal
	EqualEqual
	EqualGreater
	Greater
	GreaterEqual
	GreaterGreater
	GreaterGreaterEqual
	GreaterGreaterBar
	GreaterGreaterBarEqual
	Question
	QuestionColon
	QuestionEqual
	At
	LBracket
	RBracket
	Caret
	CaretEqual
	CaretCaret
	CaretCaretEqual
	LBrace
	Bar
	BarEqual
	BarBar
	BarBarEqual
	RBrace
	Tilde
	TildeTilde
	KeywordPlaceholder
	KeywordAlias
	KeywordImport
	KeywordType
	KeywordConst
	KeywordVar
	KeywordLet
	KeywordFunc
	KeywordMethod
	KeywordAsync
	KeywordStatic
	KeywordGenerator
	KeywordCoroutine
	KeywordProperty
	KeywordOperator
	KeywordInterface
	KeywordStruct
	KeywordUnion
	KeywordBitfield
	KeywordIf
	KeywordElse
	KeywordSwitch
	KeywordCase
	KeywordLock
	KeywordWith
	KeywordFor
	KeywordForEach
	KeywordWhile
	KeywordGoto
	KeywordAwait
	KeywordReturn
	KeywordYield
	KeywordThrow
	KeywordNull
	ShebangLine
	SingleLineComment
	MultiLineComment
	Pragma
	Identifier
	Number
	String
	Regex
	PEG
)

var typeNames = []string{
	"Invalid",
	"Partial",
	"EOF",
	"HWS",
	"VWS",
	"Bang",
	"BangEqual",
	"Hash",
	"Percent",
	"PercentEqual",
	"Ampersand",
	"AmpersandAmpersand",
	"AmpersandAmpersandEqual",
	"AmpersandEqual",
	"LParen",
	"RParen",
	"Star",
	"StarStar",
	"StarStarEqual",
	"StarEqual",
	"Plus",
	"PlusPlus",
	"PlusEqual",
	"Comma",
	"Minus",
	"MinusMinus",
	"MinusEqual",
	"Dot",
	"DotDot",
	"DotDotDot",
	"Slash",
	"SlashPercent",
	"SlashEqual",
	"Colon",
	"ColonColon",
	"ColonEqual",
	"Semicolon",
	"Less",
	"LessLess",
	"LessLessEqual",
	"LessLessBar",
	"LessLessBarEqual",
	"LessEqual",
	"LessEqualGreater",
	"Equal",
	"EqualEqual",
	"EqualGreater",
	"Greater",
	"GreaterEqual",
	"GreaterGreater",
	"GreaterGreaterEqual",
	"GreaterGreaterBar",
	"GreaterGreaterBarEqual",
	"Question",
	"QuestionColon",
	"QuestionEqual",
	"At",
	"LBracket",
	"RBracket",
	"Caret",
	"CaretEqual",
	"CaretCaret",
	"CaretCaretEqual",
	"LBrace",
	"Bar",
	"BarEqual",
	"BarBar",
	"BarBarEqual",
	"RBrace",
	"Tilde",
	"TildeTilde",
	"KeywordPlaceholder",
	"KeywordAlias",
	"KeywordImport",
	"KeywordType",
	"KeywordConst",
	"KeywordVar",
	"KeywordLet",
	"KeywordFunc",
	"KeywordMethod",
	"KeywordAsync",
	"KeywordStatic",
	"KeywordGenerator",
	"KeywordCoroutine",
	"KeywordProperty",
	"KeywordOperator",
	"KeywordInterface",
	"KeywordStruct",
	"KeywordUnion",
	"KeywordBitfield",
	"KeywordIf",
	"KeywordElse",
	"KeywordSwitch",
	"KeywordCase",
	"KeywordLock",
	"KeywordWith",
	"KeywordFor",
	"KeywordForEach",
	"KeywordWhile",
	"KeywordGoto",
	"KeywordAwait",
	"KeywordReturn",
	"KeywordYield",
	"KeywordThrow",
	"KeywordNull",
	"ShebangLine",
	"SingleLineComment",
	"MultiLineComment",
	"Pragma",
	"Identifier",
	"Number",
	"String",
	"Regex",
	"PEG",
}

func (enum Type) String() string {
	if uint(enum) >= uint(len(typeNames)) {
		return fmt.Sprintf("Type(%#x)", uint(enum))
	}
	return typeNames[enum]
}

func (enum Type) GoString() string {
	return enum.String()
}

var _ fmt.Stringer = Type(0)
var _ fmt.GoStringer = Type(0)
